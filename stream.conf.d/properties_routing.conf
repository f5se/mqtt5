# vim: set syntax=nginx ft=nginx

  # This config file is imported by proxy.conf into the stream context.
  # The log format and upstream mqtt_brokers are set in proxy.conf

  # import our demo JS code
  js_import njs/properties_routing.js;

  # Run filter for all packets? Set to 0 to only filter CONNECT
  js_var $filter_all 1;

  # Software revision from user-properties
  js_var $propver;

  map $propver $upstream_servers {
    ~1.[0-2].*         mqtt_legacy;
    ~2.0.*             mqtt_v2;
    default            REJECT;
  }
  
  upstream mqtt_legacy {
    zone mqtt_legacy 64k;
    server broker:1883 resolve;
    hash $clientid consistent;
  }

  upstream mqtt_v2 {
    zone mqtt_v2 64k;
    server broker:1883 resolve;
    hash $clientid consistent;
  }

  upstream REJECT {
    server 127.0.0.1:8099;
  }

  log_format mqtt_route '$remote_addr $server_port [$time_local] $protocol $status $bytes_received ' 
                  '$bytes_sent $upstream_addr $clientid $username $propver $upstream_servers';
  
  server {
    listen 8003;
    preread_buffer_size 1k;
    js_preread properties_routing.prereadMQTT;
    js_filter properties_routing.filterMQTT;
    proxy_pass $upstream_servers;
    proxy_connect_timeout 1s;
    proxy_timeout 5400s;

    access_log /var/log/nginx/mqtt_access.log mqtt_route;
    error_log  /var/log/nginx/mqtt_error.log info; # NGINX JavaScript debug logging
    status_zone MQTT_Traffic;
  }

  server {
    listen 8004 ssl;
    ssl_certificate /mtls/server.crt;
    ssl_certificate_key /mtls/server.key;
    ssl_client_certificate  /mtls/ca.crt;
    ssl_verify_client       optional;
    ssl_verify_depth        2;

    preread_buffer_size 1k;
    js_preread properties_routing.prereadMQTT;
    js_filter properties_routing.filterMQTT;
    proxy_pass $upstream_servers;
    proxy_connect_timeout 1s;
    proxy_timeout 5400s;

    access_log /var/log/nginx/mqtt_access.log mqtt_route;
    error_log  /var/log/nginx/mqtt_error.log info; # NGINX JavaScript debug logging
    status_zone MQTTS_Traffic;
  }

  server {
    listen 8099;
    proxy_half_close on;
    return "REJECTED\n\n";
  }

